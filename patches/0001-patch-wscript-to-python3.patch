From 06f118bac9cbf3a0f6f2e1aa5955ea2d444046e5 Mon Sep 17 00:00:00 2001
From: Matus Kosut <matus.kosut@ntnu.no>
Date: Thu, 29 Oct 2020 22:21:32 +0100
Subject: [PATCH 1/8] patch wscript to python3

---
 3rd_party/wscript  |   4 +-
 R/wscript          |   5 +-
 appcontext/wscript |  18 +--
 apps/wscript       |  38 ++---
 db/wscript         |  31 ++--
 example/wscript    |  44 ++---
 genfile/wscript    |  13 +-
 test/unit/wscript  |  18 +--
 test/wscript       |   5 +-
 wscript            | 392 +++++++++++++++++++++------------------------
 10 files changed, 273 insertions(+), 295 deletions(-)

diff --git a/3rd_party/wscript b/3rd_party/wscript
index 220728a9..92dfc967 100644
--- a/3rd_party/wscript
+++ b/3rd_party/wscript
@@ -1,2 +1,2 @@
-def build( bld ):
-	bld.recurse( [ 'boost_1_55_0', 'sqlite3', 'zstd-1.1.0' ] )
+#def build( bld ):
+#	bld.recurse( [ 'boost_1_55_0', 'sqlite3', 'zstd-1.1.0' ] )
diff --git a/R/wscript b/R/wscript
index 12e00fab..0e24b9fa 100644
--- a/R/wscript
+++ b/R/wscript
@@ -1,3 +1,2 @@
-import os, glob
-def build( bld ):
-	pass
+def build(bld):
+    pass
diff --git a/appcontext/wscript b/appcontext/wscript
index fa2a6867..c834251b 100644
--- a/appcontext/wscript
+++ b/appcontext/wscript
@@ -1,9 +1,9 @@
-def build( bld ):
-	bld.stlib(
-		target = 'appcontext',
-		source = bld.path.ant_glob( 'src/*.cpp' ),
-		use = 'boost',
-		includes='./include',
-		cxxflags = [ '-std=c++11' ],
-		export_includes = './include'	
-	)
+def build(bld):
+    bld.stlib(
+        target='appcontext',
+        source=bld.path.ant_glob('src/*.cpp'),
+        use='boost',
+        includes='./include',
+        cxxflags=['-std=c++11'],
+        export_includes='./include'
+    )
diff --git a/apps/wscript b/apps/wscript
index d7d91a77..fd1dd68c 100644
--- a/apps/wscript
+++ b/apps/wscript
@@ -1,19 +1,19 @@
-def build( bld ):
-	bld.program(
-		source = 'cat-bgen.cpp',
-		target = 'cat-bgen',
-		use = 'bgen appcontext zlib zstd boost bgen_revision_autogenerated dl rt pthread',
-		cxxflags = ['-std=c++11']
-	)
-	bld.program(
-		source = 'bgenix.cpp',
-		target = 'bgenix',
-		use = 'bgen appcontext db zlib zstd boost bgen_revision_autogenerated dl rt pthread',
-		cxxflags = ['-std=c++11']
-	)
-	bld.program(
-		source = 'edit-bgen.cpp',
-		target = 'edit-bgen',
-		use = 'bgen appcontext db zlib zstd boost bgen_revision_autogenerated dl rt pthread',
-		cxxflags = ['-std=c++11']
-	)
+def build(bld):
+    bld.program(
+        source='cat-bgen.cpp',
+        target='cat-bgen',
+        use='bgen appcontext zlib zstd boost bgen_revision_autogenerated dl rt pthread',
+        cxxflags=['-std=c++11']
+    )
+    bld.program(
+        source='bgenix.cpp',
+        target='bgenix',
+        use='bgen appcontext db zlib zstd boost bgen_revision_autogenerated dl rt pthread',
+        cxxflags=['-std=c++11']
+    )
+    bld.program(
+        source='edit-bgen.cpp',
+        target='edit-bgen',
+        use='bgen appcontext db zlib zstd boost bgen_revision_autogenerated dl rt pthread',
+        cxxflags=['-std=c++11']
+    )
diff --git a/db/wscript b/db/wscript
index 7b0b6176..1d7d2a2a 100644
--- a/db/wscript
+++ b/db/wscript
@@ -1,12 +1,19 @@
-import os.path
-
-def build( bld ):
-	sources = bld.path.ant_glob( 'src/*.cpp' )
-	bld.stlib(
-		target = 'db',
-		source = sources,
-		includes='./include',
-		cxxflags = [],
-		use = 'boost sqlite3',
-		export_includes = './include'
-	)
+def build(bld):
+    sources = bld.path.ant_glob('src/*.cpp')
+    bld.stlib(
+        target='db',
+        source=sources,
+        includes='./include',
+        cxxflags=[],
+        use='boost sqlite3',
+        export_includes='./include',
+        install_path='${PREFIX}/lib'
+    )
+    db_headers = bld.path.ant_glob('include/db/**/*.hpp')
+    # print(db_headers)
+    bld.install_files(
+        '${PREFIX}',
+        db_headers,
+        cwd=bld.path,
+        relative_trick=True
+    )
diff --git a/example/wscript b/example/wscript
index cf93b85a..5e0b9965 100644
--- a/example/wscript
+++ b/example/wscript
@@ -1,24 +1,24 @@
-def build( bld ):
-	bld.program(
-		source = 'bgen_to_vcf.cpp',
-		target = 'bgen_to_vcf',
-		use = 'bgen zlib zstd',
-		cxxflags = ['-std=c++11'],
-		install_path = None
-	)
+def build(bld):
+    bld.program(
+        source='bgen_to_vcf.cpp',
+        target='bgen_to_vcf',
+        use='bgen zlib zstd',
+        cxxflags=['-std=c++11'],
+        install_path=None
+    )
 
-	bld.program(
-		source = 'count_alleles.cpp',
-		target = 'count_alleles',
-		use = 'bgen zlib zstd dl rt pthread',
-		cxxflags = ['-std=c++11'],
-		install_path = None
-	)
+    bld.program(
+        source='count_alleles.cpp',
+        target='count_alleles',
+        use='bgen zlib zstd dl rt pthread',
+        cxxflags=['-std=c++11'],
+        install_path=None
+    )
 
-	bld.program(
-		source = 'compute_expected_dosage.cpp',
-		target = 'compute_expected_dosage',
-		use = 'bgen zlib zstd dl rt pthread',
-		cxxflags = ['-std=c++11'],
-		install_path = None
-	)
+    bld.program(
+        source='compute_expected_dosage.cpp',
+        target='compute_expected_dosage',
+        use='bgen zlib zstd dl rt pthread',
+        cxxflags=['-std=c++11'],
+        install_path=None
+    )
diff --git a/genfile/wscript b/genfile/wscript
index 4eb457cc..cdeda50c 100644
--- a/genfile/wscript
+++ b/genfile/wscript
@@ -1,4 +1,9 @@
-import os.path
-
-def build( bld ):
-	pass
+def build(bld):
+    genfile_headers = bld.path.ant_glob('include/genfile/**/*.hpp')
+    print(genfile_headers)
+    bld.install_files(
+        '${PREFIX}',
+        genfile_headers,
+        cwd=bld.path,
+        relative_trick=True
+    )
diff --git a/test/unit/wscript b/test/unit/wscript
index c9c1a513..44d19919 100644
--- a/test/unit/wscript
+++ b/test/unit/wscript
@@ -1,9 +1,9 @@
-def build( bld ):
-	bld.program(
-		source = bld.path.ant_glob( '*.cpp' ),
-		target = 'test_bgen',
-		use = 'bgen zlib zstd',
-		cxxflags = ['-std=c++11'],
-		includes = './',
-		install_path = None
-	)
+def build(bld):
+    bld.program(
+        source=bld.path.ant_glob('*.cpp'),
+        target='test_bgen',
+        use='bgen zlib zstd',
+        cxxflags=['-std=c++11'],
+        includes='./',
+        install_path=None
+    )
diff --git a/test/wscript b/test/wscript
index e6156f33..3630c093 100644
--- a/test/wscript
+++ b/test/wscript
@@ -1,3 +1,2 @@
-def build( bld ):
-	bld.recurse( [ 'unit' ] )
-
+def build(bld):
+    bld.recurse(['unit'])
diff --git a/wscript b/wscript
index a6385d9e..b35cf207 100644
--- a/wscript
+++ b/wscript
@@ -1,217 +1,185 @@
-import platform, os.path
- 
-srcdir="."
+from __future__ import print_function
+from glob import glob
+import os
+import platform
+import shutil
+import subprocess
+import tempfile
+
+srcdir = "."
 APPNAME = "bgen"
 VERSION = "1.1.7"
 
-def options( opt ):
-	opt.load( 'compiler_cxx' )
-	opt.load( 'compiler_c' )
-	opt.add_option( '--mode', action = 'store', default = 'release', dest = 'mode' )
-	
-def configure( cfg ):
-	cfg.load( 'compiler_c')
-	cfg.load( 'compiler_cxx')
-	cfg.env.CXXFLAGS = [ '-Wall', '-pedantic', '-Wno-unused-local-typedefs', '-Wno-c++11-long-long', '-Wno-deprecated-declarations', '-Wno-long-long', '-fPIC' ]
-	cfg.env.CFLAGS = [ '-Wall', '-pedantic', '-Wno-unused-local-typedefs', '-Wno-c++11-long-long', 'Wno-deprecated-declarations', '-Wno-long-long', '-fPIC' ]
-	if cfg.options.mode == 'release':
-		cfg.env.CXXFLAGS += [ '-O3' ]
-		cfg.env.CFLAGS = [ '-O3' ]
-	elif cfg.options.mode == 'debug':
-		cfg.env.CXXFLAGS += [ '-g' ]
-		cfg.env.CFLAGS = [ '-g' ]
-	else:
-		raise Exception( "Unknown value for --mode, please specify --mode=debug or --mode=release" )
-
-	cfg.check_cxx( lib='z', uselib_store='zlib', msg = 'zlib' )
-	if platform.system() != "Darwin":
-		cfg.check_cxx( lib='rt', uselib_store='rt', msg = 'rt' )
-		cfg.check_cxx( lib='pthread', uselib_store='pthread', msg = 'pthread' )
-		cfg.check_cxx( lib='dl', uselib_store='dl', msg = 'dl' )
-
-def build( bld ):
-	print ("Creating %s build..." % bld.options.mode )
-#	bld(
-#		rule = """printf '#ifndef BGEN_REVISION_HPP\n#define BGEN_REVISION_HPP\nnamespace globals {\n\tchar const* bgen_version = \"%%s\" ;\n\tchar const* const bgen_revision = \"%%s\" ;\n}\n#endif\n' `echo """ + VERSION + "` `hg parents --template={node}` > ${TGT}""",
-#		always = True,
-#		target = "bgen_revision_autogenerated.hpp",
-#		name = "bgen_revision_autogenerated",
-#		uselib = "",
-#		on_results = False
-#	)
-	bld(
-		rule = """fossil status | grep checkout | sed -e 's/checkout: *//' | cut -d' ' -f1 > ${TGT}""",
-		target = "bgen_revision_autogenerated.txt",
-		name = "bgen_revision_autogenerated_txt",
-		uselib = "",
-		on_results = False
-	)
-	bld(
-		rule = """printf '#ifndef BGEN_REVISION_HPP\n#define BGEN_REVISION_HPP\nnamespace globals {\n\tchar const* bgen_version = \"%%s\" ;\n\tchar const* const bgen_revision = \"%%s\" ;\n}\n#endif\n' `echo """ + VERSION + "` `cat bgen_revision_autogenerated.txt` > ${TGT}""",
-		always = True,
-		target = "bgen_revision_autogenerated.hpp",
-		name = "bgen_revision_autogenerated",
-		uselib = "bgen_revision_autogenerated_txt",
-		on_results = False
-	)
-
-	bgen_sources =bld.path.ant_glob( 'src/*.cpp' )
-	bld.stlib(
-		source = bgen_sources,
-		target = 'bgen',
-		includes = 'genfile/include',
-		use = 'zlib zstd sqlite3 db',
-		export_includes = 'genfile/include'
-	)
-	bld.recurse( [ '3rd_party', 'appcontext', 'genfile', 'db', 'apps', 'example', 'test', 'R' ] )
-	# Copy files into rbgen package directory
-	for source in bgen_sources:
-		bld( rule = 'cp ${SRC} ${TGT}', source = source, target = 'R/rbgen/src/bgen/' + os.path.basename( source.abspath() ), always = True )
+
+def options(opt):
+    opt.load('compiler_cxx')
+    opt.load('compiler_c')
+    opt.add_option('--mode', action='store', default='release', dest='mode')
+
+
+def configure(cfg):
+    cfg.load('compiler_c')
+    cfg.load('compiler_cxx')
+    cfg.env.CXXFLAGS = [
+        '-Wall', '-pedantic', '-Wno-unused-local-typedefs',  # '-Wno-c++11-long-long',
+        '-Wno-deprecated-declarations', '-Wno-long-long', '-fPIC']
+    cfg.env.CFLAGS = [
+        '-Wall', '-pedantic', '-Wno-unused-local-typedefs',  # '-Wno-c++11-long-long',
+        'Wno-deprecated-declarations', '-Wno-long-long', '-fPIC']
+    if cfg.options.mode == 'release':
+        cfg.env.CXXFLAGS += ['-O3']
+        cfg.env.CFLAGS = ['-O3']
+    elif cfg.options.mode == 'debug':
+        cfg.env.CXXFLAGS += ['-g']
+        cfg.env.CFLAGS = ['-g']
+    else:
+        raise Exception("Unknown value for --mode, please specify --mode=debug or --mode=release")
+
+    cfg.check_cxx(lib='z', uselib_store='zlib', msg='zlib')
+    cfg.check_cxx(lib='boost_iostreams', uselib_store='boost', msg='boost_iostreams')
+    cfg.check_cxx(lib='boost_system', uselib_store='boost', msg='boost_system')
+    cfg.check_cxx(lib='boost_filesystem', uselib_store='boost', msg='boost_filesystem')
+    cfg.check_cxx(lib='boost_thread', uselib_store='boost', msg='boost_thread')
+    cfg.check_cxx(lib='boost_timer', uselib_store='boost', msg='boost_timer')
+    cfg.check_cxx(lib='boost_chrono', uselib_store='boost', msg='boost_chrono')
+    cfg.check_cxx(lib='boost_date_time', uselib_store='boost', msg='boost_date_time')
+    cfg.check_cxx(lib='sqlite3', uselib_store='sqlite3', msg='sqlite3')
+    cfg.check_cxx(lib='zstd', uselib_store='zstd', msg='zstd')
+    if platform.system() != "Darwin":
+        cfg.check_cxx(lib='rt', uselib_store='rt', msg='rt')
+        cfg.check_cxx(lib='pthread', uselib_store='pthread', msg='pthread')
+        cfg.check_cxx(lib='dl', uselib_store='dl', msg='dl')
+
+
+def build(bld):
+    print("Creating {} build...".format(bld.options.mode))
+    bld(
+        rule="""printf '#ifndef BGEN_REVISION_HPP\n#define BGEN_REVISION_HPP\nnamespace globals {\n\tchar const* bgen_version = \"%%s\" ;\n\tchar const* const bgen_revision = \"%%s\" ;\n}\n#endif\n' `echo """ + VERSION + "` `hg parents --template={node}` > ${TGT}""",  # noqa
+        always=True,
+        target="bgen_revision_autogenerated.hpp",
+        name="bgen_revision_autogenerated",
+        uselib="",
+        # on_results=True
+        on_results=False
+    )
+
+    bgen_sources = bld.path.ant_glob('src/*.cpp')
+    bld.stlib(
+        source=bgen_sources,
+        target='bgen',
+        includes='genfile/include',
+        use='db sqlite3 boost zstd',
+        export_includes='genfile/include',
+        install_path='${PREFIX}/lib'
+    )
+    bld.recurse(['appcontext', 'genfile', 'db', 'apps', 'example', 'test', 'R'])
+    # Copy files into rbgen package directory
+    for source in bgen_sources:
+        bld(
+            rule='cp ${SRC} ${TGT}',
+            source=source,
+            target=os.path.join('R/rbgen/src/bgen', os.path.basename(source.abspath())),
+            always=True
+        )
+
 
 class ReleaseBuilder:
-	def __init__( self, APPNAME, VERSION ):
-		self.APPNAME = APPNAME
-		self.VERSION = VERSION
-		self.apps = [ 'bgenix', 'cat-bgen', 'edit-bgen' ]
-
-	def makedirs( self, path ):
-		try:
-			os.makedirs( path )
-		except os.error as  e:
-			pass
-
-	def create_pkgname_stub( self, packageName, includePlatform = True ):
-		import platform
-		stub = '%s_v%s' % ( packageName, self.VERSION )
-		if includePlatform:
-			if platform.system() == 'Darwin':
-				stub = '%s-osx' % stub
-			elif platform.system() == 'Linux':
-				distro = platform.linux_distribution()
-				stub = '%s-%s%s-%s' % ( stub, distro[0], distro[1], platform.machine() )
-		return stub
-	
-	def build_bgen( self ):
-		import os, tempfile, shutil, subprocess
-		tempdir = tempfile.mkdtemp()
-		release_stub = self.create_pkgname_stub( 'bgen' )
-		release_dir = os.path.join( tempdir, release_stub )
-		os.mkdir( release_dir )
-		shutil.copyfile( "LICENSE_1_0.txt", os.path.join( release_dir, "LICENSE_1_0.txt" ) )
-		for app in self.apps:
-			source = os.path.join( 'build', 'apps', app )
-			target = os.path.join( release_dir, app )
-			shutil.copyfile( source, target )
-			shutil.copymode( source, target )
-		shutil.copytree( 'example', os.path.join( release_dir, 'example' ), ignore = shutil.ignore_patterns( '*.cpp', 'wscript' ))
-		tarball = self.create_tarball( 'bgen', release_stub, tempdir )
-		return os.path.join( tempdir, tarball )
-	
-	def create_tarball( self, name, source, workingdir ):
-		import subprocess
-		tarball = "%s.tgz" % source
-		tarballPath = os.path.join( workingdir, tarball )
-		process = subprocess.Popen( [ 'tar', '-czf', tarball, source ], cwd = workingdir )
-		process.wait()
-		print ('Created %s release tarball in "%s"' % ( name, tarball ))
-		print ("Contents are:")
-		print (subprocess.Popen( [ 'tar', '-tzf',tarballPath ], stdout = subprocess.PIPE ).communicate()[0])
-		return tarball
-		
-	def build_rbgen( self ):
-		import os, tempfile, shutil, subprocess, platform
-		tempdir = tempfile.mkdtemp()
-		release_stub = self.create_pkgname_stub( 'rbgen', includePlatform = False )
-		rbgen_dir = os.path.join( tempdir, release_stub )
-		shutil.copytree( 'R/package/', rbgen_dir )
-		os.makedirs( os.path.join( rbgen_dir, "src", "include" ))
-		os.makedirs( os.path.join( rbgen_dir, "src", "include", "boost" ))
-		os.makedirs( os.path.join( rbgen_dir, "src", "include", "zstd-1.1.0" ))
-		os.makedirs( os.path.join( rbgen_dir, "src", "db" ))
-		os.makedirs( os.path.join( rbgen_dir, "src", "bgen" ))
-		os.makedirs( os.path.join( rbgen_dir, "src", "boost" ))
-		os.makedirs( os.path.join( rbgen_dir, "src", "sqlite3" ))
-		os.makedirs( os.path.join( rbgen_dir, "src", "zstd-1.1.0" ))
-
-		# Copy source files in
-		from glob import glob
-		for filename in glob( 'src/*.cpp' ):
-			shutil.copy( filename, os.path.join( rbgen_dir, "src", "bgen", os.path.basename( filename ) ) )
-
-		for filename in glob( 'db/src/*.cpp' ):
-			shutil.copy( filename, os.path.join( rbgen_dir, "src", "db", os.path.basename( filename ) ) )
-
-		for filename in glob( '3rd_party/sqlite3/sqlite3/sqlite3.c' ):
-			shutil.copy( filename, os.path.join( rbgen_dir, "src", "sqlite3", os.path.basename( filename ) ) )
-
-		for filename in glob( '3rd_party/zstd-1.1.0/lib/common/*.c' ) + glob( '3rd_party/zstd-1.1.0/lib/compress/*.c' ) + glob( '3rd_party/zstd-1.1.0/lib/decompress/*.c' ):
-			shutil.copy( filename, os.path.join( rbgen_dir, "src", "zstd-1.1.0", os.path.basename( filename ) ) )
-
-		boostGlobs = [
-			'libs/system/src/*.cpp',
-			'libs/thread/src/*.cpp',
-			'libs/thread/src/*.inl',
-			'libs/thread/src/pthread/once_atomic.cpp',
-			'libs/thread/src/pthread/thread.cpp',
-			'libs/thread/src/pthread/timeconv.inl',
-			'libs/filesystem/src/*.cpp',
-			'libs/date_time/src/posix_time/*.cpp',
-			'libs/timer/src/*.cpp',
-			'libs/chrono/src/*.cpp',
-		]
-
-		for pattern in boostGlobs:
-			for filename in glob( '3rd_party/boost_1_55_0/%s' % pattern ):
-				shutil.copy( filename, os.path.join( rbgen_dir, "src", "boost", os.path.basename( filename ) ) )
-
-		include_paths = [
-			"3rd_party/boost_1_55_0/boost/",
-			"3rd_party/zstd-1.1.0/",
-			"3rd_party/sqlite3/",
-			"genfile/include/genfile",
-			"db/include/db"
-		]
-		
-		boostHeaderLibs = [
-			'system',
-			'thread',
-			'filesystem',
-			'date_time',
-			'timer',
-			'chrono',
-			'preprocessor',
-			'function',
-			'optional',
-			'mpl'
-		]
-		
-		for include_path in include_paths:
-			for root, path, filenames in os.walk( include_path ):
-				self.makedirs( os.path.join( rbgen_dir, "src", "include", root ))
-				for name in filenames:
-					fullname = os.path.join( root, name )
-					if os.path.isfile( fullname ) and (
-						name.endswith( '.h')
-						or name.endswith( ".hpp" )
-						or name.endswith( ".ipp" )
-						or name.endswith( ".inl" )
-					):
-						dest = os.path.join( rbgen_dir, "src", "include", root, name )
-						shutil.copy( fullname, os.path.join( rbgen_dir, "src", "include", fullname ))
-						#print "Copied \"%s\"." % fullname
-
-		tarball = self.create_tarball( 'rbgen', release_stub, tempdir )
-		return os.path.join( tempdir, tarball )
-		
-
-def release( bld ):
-	print ("Building bgen release tarball...")
-	release = ReleaseBuilder( APPNAME, VERSION )
-	result = release.build_bgen()
-	print ("Created %s release tarball in \"%s\"" % ( 'bgen', result ))
-
-def build_rbgen( bld ):
-	print ("Building rbgen source package tarball...")
-	release = ReleaseBuilder( APPNAME, VERSION )
-	result = release.build_rbgen()
-	print ("Created %s release tarball in \"%s\"" % ( 'rbgen', result ))
+    def __init__(self, APPNAME, VERSION):
+        self.APPNAME = APPNAME
+        self.VERSION = VERSION
+        self.apps = ['bgenix', 'cat-bgen', 'edit-bgen']
+
+    def makedirs(self, path):
+        try:
+            os.makedirs(path)
+        except os.error:
+            pass
+
+    def create_pkgname_stub(self, packageName, includePlatform=True):
+        stub = '{}_v{}'.format(packageName, self.VERSION)
+        if includePlatform:
+            if platform.system() == 'Darwin':
+                stub = '{}-osx'.format(stub)
+            elif platform.system() == 'Linux':
+                distro = platform.linux_distribution()
+                stub = '{}-{}{}-{}'.format(stub, distro[0], distro[1], platform.machine())
+        return stub
+
+    def build_bgen(self):
+        tempdir = tempfile.mkdtemp()
+        release_stub = self.create_pkgname_stub('bgen')
+        release_dir = os.path.join(tempdir, release_stub)
+        os.mkdir(release_dir)
+        shutil.copyfile("LICENSE_1_0.txt", os.path.join(release_dir, "LICENSE_1_0.txt"))
+        for app in self.apps:
+            source = os.path.join('build', 'apps', app)
+            target = os.path.join(release_dir, app)
+            shutil.copyfile(source, target)
+            shutil.copymode(source, target)
+        shutil.copytree(
+            'example', os.path.join(release_dir, 'example'),
+            ignore=shutil.ignore_patterns('*.cpp', 'wscript'))
+        tarball = self.create_tarball('bgen', release_stub, tempdir)
+        return os.path.join(tempdir, tarball)
+
+    def create_tarball(self, name, source, workingdir):
+        tarball = "{}.tgz".format(source)
+        tarballPath = os.path.join(workingdir, tarball)
+        process = subprocess.Popen(['tar', '-czf', tarball, source], cwd=workingdir)
+        process.wait()
+        print('Created {} release tarball in "{}"'.format(name, tarball))
+        print("Contents are:")
+        print(subprocess.Popen(['tar', '-tzf', tarballPath], stdout=subprocess.PIPE).communicate()[0].decode('utf-8'))
+        return tarball
+
+    def build_rbgen(self):
+        tempdir = os.environ.get('GITHUB_WORKSPACE', tempfile.mkdtemp())
+        release_stub = self.create_pkgname_stub('rbgen', includePlatform=False)
+        rbgen_dir = os.path.join(tempdir, release_stub)
+        shutil.copytree('R/package/', rbgen_dir)
+        os.makedirs(os.path.join(rbgen_dir, "src", "include"))
+        os.makedirs(os.path.join(rbgen_dir, "src", "db"))
+        os.makedirs(os.path.join(rbgen_dir, "src", "bgen"))
+        # Copy source files in
+        for filename in glob('src/*.cpp'):
+            shutil.copy(filename, os.path.join(rbgen_dir, "src", "bgen", os.path.basename(filename)))
+
+        for filename in glob('db/src/*.cpp'):
+            shutil.copy(filename, os.path.join(rbgen_dir, "src", "db", os.path.basename(filename)))
+
+        include_paths = [
+            "genfile/include/genfile",
+            "db/include/db"
+        ]
+
+        for include_path in include_paths:
+            for root, path, filenames in os.walk(include_path):
+                self.makedirs(os.path.join(rbgen_dir, "src", "include", root))
+                for name in filenames:
+                    fullname = os.path.join(root, name)
+                    if os.path.isfile(fullname) and (
+                        name.endswith('.h') or
+                        name.endswith(".hpp") or
+                        name.endswith(".ipp") or
+                        name.endswith(".inl")
+                    ):
+                        # dest = os.path.join(rbgen_dir, "src", "include", root, name)
+                        shutil.copy(fullname, os.path.join(rbgen_dir, "src", "include", fullname))
+                        # print("Copied \"{}\".".format(fullname))
+
+        tarball = self.create_tarball('rbgen', release_stub, tempdir)
+        return os.path.join(tempdir, tarball)
+
+
+def release(bld):
+    print("Building bgen release tarball...")
+    release = ReleaseBuilder(APPNAME, VERSION)
+    result = release.build_bgen()
+    print("Created {} release tarball in \"{}\"".format('bgen', result))
+
+
+def build_rbgen(bld):
+    print("Building rbgen source package tarball...")
+    release = ReleaseBuilder(APPNAME, VERSION)
+    result = release.build_rbgen()
+    print("Created {} release tarball in \"{}\"".format('rbgen', result))
-- 
2.28.0

