
//          Copyright Gavin Band 2008 - 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#include <string>
#include "appcontext/CmdLineOptionProcessor.hpp"
#include "appcontext/ApplicationContext.hpp"
#include "genfile/bgen/bgen.hpp"
#include "../../bgen_revision_autogenerated.hpp"

namespace globals {
	std::string const program_name = "bgen-index" ;
	std::string const program_version = bgen_revision ;
}

struct CatBgenOptionProcessor: public appcontext::CmdLineOptionProcessor
{
public:
	std::string get_program_name() const { return globals::program_name ; }

	void declare_options( appcontext::OptionProcessor& options ) {
		// Meta-options
		options.set_help_option( "-help" ) ;

		options.declare_group( "Input / output file options" ) ;
		options[ "-g" ]
			.set_description(
				"Path of bgen file to operate on."
			)
			.set_takes_single_value()
		;

		options[ "-clobber" ]
			.set_description(
				"Specify that cat-bgen should overwrite existing output file if it exists."
			)
		;
	}
} ;

struct IndexBgenApplication: public appcontext::ApplicationContext
{
public:
	IndexBgenApplication( int argc, char** argv ):
		appcontext::ApplicationContext(
			globals::program_name,
			globals::program_version,
			std::auto_ptr< appcontext::OptionProcessor >( new CatBgenOptionProcessor ),
			argc,
			argv,
			"-log"
		)
	{
	}

private:
} ;

int main( int argc, char** argv ) {
    try {
		IndexBgenApplication app( argc, argv ) ;
    }
	catch( appcontext::HaltProgramWithReturnCode const& e ) {
		return e.return_code() ;
	}
	return 0 ;
}
