import os.path

def configure( conf ):
	pass

def build( bld ):
	sources = (
		bld.path.ant_glob( 'libs/iostreams/src/file_descriptor.cpp' ) +
		bld.path.ant_glob( 'libs/iostreams/src/gzip.cpp' ) +
		bld.path.ant_glob( 'libs/iostreams/src/mapped_file.cpp' ) +
		bld.path.ant_glob( 'libs/iostreams/src/zlib.cpp' ) +
		bld.path.ant_glob( 'libs/system/src/*.cpp' ) +
		bld.path.ant_glob( 'libs/thread/src/*.cpp' ) +
		bld.path.ant_glob( 'libs/thread/src/pthread/once_atomic.cpp' ) +
		bld.path.ant_glob( 'libs/thread/src/pthread/thread.cpp' ) +
		bld.path.ant_glob( 'libs/filesystem/src/*.cpp' ) +
		bld.path.ant_glob( 'libs/date_time/src/posix_time/*.cpp' ) +
		bld.path.ant_glob( 'libs/timer/src/*.cpp' ) +
		bld.path.ant_glob( 'libs/chrono/src/*.cpp' )
	)
	bld.stlib(
		target = 'boost',
		source = sources,
		includes = './',
		export_includes = './', 
		uselib = 'ZLIB BZIP2 RT',
		cxxflags = [ '-std=c++11', '-Wno-unused-local-typedefs', '-Wno-c++11-long-long', '-Wno-keyword-macro', '-Wno-unused-const-variable' ]
	)
	# Copy files into rbgen package directory
	# This needs extra files not among the cpp files above, so we recursively copy directories
	all_sources = sources + bld.path.ant_glob( 'libs/thread/src/pthread/timeconv.inl' )
	for source in all_sources:
		bld( rule = 'cp ${SRC} ${TGT}', source = source, target = '../../R/rbgen/src/boost/' + os.path.basename( source.abspath() ), always = True )
